<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Powershell GUI"
    Height="Auto" Width="Auto"
    MinHeight="30" MinWidth="700"
    WindowStartupLocation="CenterScreen"
    WindowStyle="None"
    MaxHeight="{Binding Source={x:Static SystemParameters.MaximizedPrimaryScreenHeight}}"
    MaxWidth="{Binding Source={x:Static SystemParameters.MaximizedPrimaryScreenWidth}}"
    ResizeMode="CanResize"> <!--x:Name="MainWindow" if you add this, Dict.Window becomes dict.MainWindow -->

    <Window.Resources>
        <Style TargetType="Window">
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome
                        CaptionHeight="{Binding ActualHeight, ElementName=RootWindow}"
                        ResizeBorderThickness="3"
                        CornerRadius="2"
                        NonClientFrameEdges="None"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button">
            <!--<Setter Property="Background" Value="#B1DDF1"/>-->
            <Setter Property="BorderThickness" Value="0.5"/>
            <!--<Setter Property="BorderBrush" Value="#6B6D76"/>-->
            <Setter Property="Height" Value="45"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="Margin" Value="0,2,0,0"/>
        </Style>

        <Style TargetType="Button" x:Key="ButtonHover"> <!-- Unused -->
            <Setter Property="Background" Value="#B1DDF1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#63BBE3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#D6E3F8"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="TextBlock" x:Key="WindowAssetsFont">
            <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
            <Setter Property="FontSize" Value="11"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="Button" x:Key="WindowChromeButton">
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
            <!-- <Setter Property="FontFamily" Value="Webdings"/> --> <!-- Backup if no FontFamily="Segoe MDL2 Assets" -->
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="45"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="Button" x:Key="WindowChromeButtonRed" BasedOn="{StaticResource WindowChromeButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="WindowChromeButtonMaximize" BasedOn="{StaticResource WindowChromeButton}">
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Maximized">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Normal">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="WindowChromeButtonRestore" BasedOn="{StaticResource WindowChromeButton}">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Maximized">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Normal">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Border" x:Key="WindowBorderMaximize">
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <!-- Add to avoid border disappearing when window is maximised -->
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Maximized">
                    <Setter Property="Margin" Value="7"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                             Value="Normal">
                    <Setter Property="Margin" Value="0"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <!--<LinearGradientBrush x:Key="LightMenuItemHoverBrush" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FE5E67" Offset="0.0"/>
                    <GradientStop Color="#FE4851" Offset="0.05"/>
                    <GradientStop Color="#FFC2C5" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>-->
        <SolidColorBrush x:Key="PrimaryColorBrush1" Color="#559CE4" /> <!--Blue-->
        <SolidColorBrush x:Key="PrimaryColorBrush2" Color="#559CE4" Opacity=".75" /> <!--Blue-->
        <SolidColorBrush x:Key="LightMenuItemDropDownBrush" Color="#83B8EC" /> <!--Blue-->
        <SolidColorBrush x:Key="LightMenuItemHighlightBrush" Color="#BEE6FD" /> <!--Light Blue-->
        <SolidColorBrush x:Key="LightMenuItemBorderBrush" Color="#696D7D" /> <!--Black-->
        <SolidColorBrush x:Key="LightBackgroundBrush" Color="#F2F2F2" /> <!-- Light Gray -->

        <Style TargetType="Grid">
            <Setter Property="Background" Value="{StaticResource LightBackgroundBrush}"/>
        </Style>
        <!-- Menu and MenuItem ControlTemplate
            https://stackoverflow.com/questions/24698755/how-to-change-the-background-of-the-menuitem-on-mouseover-in-wpf -->

        <Style TargetType="Menu">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Menu">
                        <Border x:Name="MainMenu" Background="{TemplateBinding Background}">
                            <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="MenuItemHeaderControlTemplate" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot"
                    BorderBrush="{StaticResource PrimaryColorBrush1}"
                    CornerRadius="0"
                    BorderThickness="0"
                    Background="{TemplateBinding Background}"
                    SnapsToDevicePixels="True"> <!-- BorderBrush is Menu Border -->
                <Grid VerticalAlignment="Center" Height="30" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}"
                                      Content="{TemplateBinding Header}"
                                      Grid.Column="1"
                                      ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                      ContentSource="Header"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="Center"
                                      HorizontalAlignment="Center"/>
                    <Popup x:Name="PART_Popup"
                           AllowsTransparency="True"
                           Focusable="False"
                           IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                           Placement="Bottom">
                        <!-- Sub Menu Border and Background Color --> <!-- Padding is the space between button and border -->
                        <Border x:Name="SubMenuBorder"
                                BorderBrush="{StaticResource LightMenuItemDropDownBrush}"
                                BorderThickness="1"
                                Background="{StaticResource LightMenuItemDropDownBrush}"
                                Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <!-- Size of SubMenu when dropdown -->
                                    <Canvas HorizontalAlignment="Left"
                                            VerticalAlignment="Top"
                                            Height="0"
                                            Width="0">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                   Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                   Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    Grid.IsSharedSizeScope="True"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                </Trigger>

                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource LightMenuItemDropDownBrush}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource LightMenuItemDropDownBrush}"/>
                    <Setter Property="BorderThickness" TargetName="templateRoot" Value="0"/> <!-- Value needs to equal to Border "templateRoot", or else content shifts on hover -->
                </Trigger>

                <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource LightMenuItemDropDownBrush}" /> <!-- Clicked color -->
                    <Setter Property="Header" Value="Test" />
                    <Setter Property="BorderBrush" Value="{StaticResource LightMenuItemDropDownBrush}"></Setter>
                    <Setter Property="BorderThickness" Value="0"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="MenuItemSubMenuControlTemplate" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    SnapsToDevicePixels="True">
                <Grid Margin="-20,0,0,0" Background="Transparent"> <!-- Remove Icon Space-->
                    <Grid.ColumnDefinitions> <!-- I think these are for submenus that open right -->
                        <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="13"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon"
                                      Content="{TemplateBinding Icon}"
                                      ContentSource="Icon"
                                      HorizontalAlignment="Center"
                                      Height="16"
                                      Margin="3"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="Center" Width="16"/>
                    <Border x:Name="GlyphPanel"
                            BorderBrush="{StaticResource LightMenuItemBorderBrush}"
                            BorderThickness="1"
                            Background="{StaticResource LightMenuItemBorderBrush}"
                            ClipToBounds="False"
                            Margin="-1,0,0,0"
                            Visibility="Hidden"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="22"
                            Height="22">
                        <Path x:Name="Glyph"
                              Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z"
                              Fill="{StaticResource LightMenuItemBorderBrush}"
                              FlowDirection="LeftToRight"
                              Height="11"
                              Width="10"/>
                    </Border>
                    <ContentPresenter x:Name="menuHeaderContainer"
                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                      Content="{TemplateBinding Header}"
                                      Grid.Column="2"
                                      ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                      ContentSource="Header"
                                      HorizontalAlignment="Left"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="Center"/>
                    <TextBlock Grid.Column="4"
                               Margin="{TemplateBinding Padding}"
                               Opacity="0.7"
                               Text="{TemplateBinding InputGestureText}"
                               VerticalAlignment="Center"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <!-- SubMenu Border Highlight -->
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource LightMenuItemHighlightBrush}"/>
                    <!-- SubMenu Background Highlight -->
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource LightMenuItemHighlightBrush}"/>
                    <Setter Property="TextBlock.Foreground" TargetName="menuHeaderContainer" Value="Black" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#B8B8B8"/>
                    <Setter Property="Fill" TargetName="Glyph" Value="#B8B8B8"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsHighlighted" Value="True"/>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="templateRoot" Value="#0A000000"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#21000000"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="MenuItemSeparatorTemplate" TargetType="{x:Type Separator}">
             <Border Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Margin="0"/>
        </ControlTemplate>

    </Window.Resources>


    <Window.InputBindings>
        <KeyBinding Command="{Binding Path=GuessRiggedButton}" Key="Q"/>
        <KeyBinding Command="{Binding Path=GuessButton}" Key="W"/>
        <KeyBinding Command="{Binding Path=GuessRandomButton}" Key="E"/>
        <KeyBinding Command="{Binding Path=ResetButton}" Key="R" Modifiers="Control"/>
    </Window.InputBindings>


    <Border Style="{StaticResource WindowBorderMaximize}">


        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="*" MinWidth="100"/>
                <ColumnDefinition Width="*" MinWidth="100"/>
                <ColumnDefinition Width="*" MinWidth="100"/>
                <ColumnDefinition Width="*" MinWidth="100"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="30"/>  <!--0 Caption Bar-->
                <RowDefinition Height="*"/>   <!--1 TextBlock, GroupBox, TextBox-->
                <RowDefinition Height="45"/>  <!--2 Two Way Text Box-->
                <RowDefinition Height="60"/>  <!--3 Stack Panel Buttons-->
                <RowDefinition Height="5"/>   <!--4 Spacing-->
                <RowDefinition Height="30"/>  <!--5 ProgressBar-->
                <RowDefinition Height="100"/> <!--6 ListBox-->
            </Grid.RowDefinitions>

            <Grid x:Name="RootWindow" Grid.Row="0" Grid.ColumnSpan="6" Background="{StaticResource PrimaryColorBrush1}">
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="Powershell GUI" FontSize="12" Margin="5,0,0,0"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button x:Name="buttonMinimize" Style="{StaticResource WindowChromeButton}">
                        <TextBlock Text="&#xE921;" Style="{StaticResource WindowAssetsFont}"/>
                    </Button>
                    <Button x:Name="buttonMaximize" Style="{StaticResource WindowChromeButtonMaximize}">
                        <TextBlock Text="&#xE922;" Style="{StaticResource WindowAssetsFont}"/>
                    </Button>
                    <Button x:Name="buttonRestore" Style="{StaticResource WindowChromeButtonRestore}">
                        <TextBlock Text="&#xE923;" Style="{StaticResource WindowAssetsFont}"/>
                    </Button>
                    <Button x:Name="buttonClose" Style="{StaticResource WindowChromeButtonRed}">
                        <TextBlock Text="&#xE8BB;" Style="{StaticResource WindowAssetsFont}"/>
                    </Button>
                    <!--
                    <Button x:Name="buttonMinimize" Content="0" Style="{StaticResource WindowChromeButton}"/>
                    <Button x:Name="buttonMaximize" Content="1" Style="{StaticResource WindowChromeButtonMaximize}"/>
                    <Button x:Name="buttonRestore" Content="2" Style="{StaticResource WindowChromeButtonRestore}"/>
                    <Button x:Name="buttonClose" Content="r" Style="{StaticResource WindowChromeButtonRed}"/>
                    -->
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="30,0,0,0">
                    <Menu WindowChrome.IsHitTestVisibleInChrome="True">
                        <MenuItem Header="_File" Height="30" Width="Auto" Template="{DynamicResource MenuItemHeaderControlTemplate}">
                            <MenuItem Header="_Other" Template="{DynamicResource MenuItemSubMenuControlTemplate}"/>
                            <MenuItem Header="_Stuff" Template="{DynamicResource MenuItemSubMenuControlTemplate}"/>
                            <Separator Template="{DynamicResource MenuItemSeparatorTemplate}" Background="#252525"/>
                            <MenuItem x:Name="subMenuFileExit" Header="E_xit" Template="{DynamicResource MenuItemSubMenuControlTemplate}"/>
                        </MenuItem>
                        <MenuItem Header="_Edit" Height="30" Width="Auto" Template="{DynamicResource MenuItemHeaderControlTemplate}">
                            <MenuItem Header="_Copy" Template="{DynamicResource MenuItemSubMenuControlTemplate}" Command="{Binding historyCopy}"/>
                        </MenuItem>
                    </Menu>
                </StackPanel>
            </Grid>

            <TextBlock Grid.Row="1" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="1" Margin="10,0,0,0"
                TextWrapping="Wrap" UseLayoutRounding="True" VerticalAlignment="Top" Foreground="Black" FontSize="14" Text="{Binding WelcomeMessage}"/>

            <GroupBox Grid.Row="1" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="5" Header="History">
                <TextBox x:Name="ScrollToEndTextBox" TextWrapping="Wrap" Text="{Binding HistoryTextBox}" ScrollViewer.VerticalScrollBarVisibility="Auto" IsReadOnly="True"
                Background="{StaticResource LightBackgroundBrush}" Foreground="Gray"/>
                <!--FocusManager.FocusedElement="{Binding ElementName=FocusedTextBox}" avoid messing with textbox AdornerDecorator-->
            </GroupBox>

            <GroupBox Grid.Row="2" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="5" Header="Two Way Text Box" FocusManager.FocusedElement="{Binding ElementName=FocusedTextBox}">
                <TextBox x:Name="FocusedTextBox" TextWrapping="Wrap" Text="{Binding TwoWayTextBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ScrollViewer.VerticalScrollBarVisibility="Disabled" MaxLength="3" MaxLines="1"/>
            </GroupBox>

            <!--<StackPanel Grid.Row="3" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="5" Margin="0,0,0,0" Orientation="Horizontal" HorizontalAlignment="Center">
                <Button Content="Guess(Rigged)" HorizontalAlignment="Left" Command="{Binding GuessRiggedButton}" Margin="10,0,0,0"/>
                <Button Content="Guess" HorizontalAlignment="Left" Command="{Binding GuessButton}" Margin="10,0,0,0"/>
                <Button Content="GuessRandom" HorizontalAlignment="Left" Command="{Binding GuessRandomButton}" Margin="10,0,0,0"/>
                <Button Content="Reset" HorizontalAlignment="Left" Command="{Binding ResetButton}" Margin="10,0,0,0"/>
            </StackPanel>-->
            <Button Content="(Q) Guess Rigged" HorizontalAlignment="Stretch" Command="{Binding GuessRiggedButton}" Grid.Row="3" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="1" Width="Auto" Background="{StaticResource PrimaryColorBrush2}" BorderBrush="Black"/>
            <Button Content="(W) Guess" HorizontalAlignment="Stretch" Command="{Binding GuessButton}" Grid.Row="3" Grid.RowSpan="1" Grid.Column="2" Grid.ColumnSpan="1" Width="Auto" Background="{StaticResource PrimaryColorBrush2}" BorderBrush="Black"/>
            <Button Content="(E) GuessRandom" HorizontalAlignment="Stretch" Command="{Binding GuessRandomButton}" Grid.Row="3" Grid.RowSpan="1" Grid.Column="3" Grid.ColumnSpan="1" Width="Auto" Background="{StaticResource PrimaryColorBrush2}" BorderBrush="Black"/>
            <Button Content="(Ctrl + R) Reset" HorizontalAlignment="Stretch" Command="{Binding ResetButton}" Grid.Row="3" Grid.RowSpan="1" Grid.Column="4" Grid.ColumnSpan="1" Width="Auto" Background="{StaticResource PrimaryColorBrush2}" BorderBrush="Black"/>

            <Grid Grid.Row="5" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="6" >
                <ProgressBar Minimum="0" Maximum="100" Value="{Binding Progress}"/>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding Progress, StringFormat={}{0:0}%}"/>
            </Grid>

            <GroupBox Grid.Row="6" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="6" Header="Log">
                <ListView x:Name="listViewLog" SelectionMode="Extended" ItemsSource="{Binding ActionList}">
                    <ListView.View>
                        <GridView AllowsColumnReorder="False">
                            <GridViewColumn Header="TimeStamp" DisplayMemberBinding="{Binding LogTime}" Width="200"/>
                            <GridViewColumn Header="Log" DisplayMemberBinding="{Binding LogDescription}" Width="200"/>
                        </GridView>
                    </ListView.View>
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <!-- https://stackoverflow.com/questions/9880589/bind-to-selecteditems-from-datagrid-or-listbox-in-mvvm
                                 Context Menu's are not part of the visual tree, use PlacementTarget.property, RelativeSource to find the datacontext -->
                            <MenuItem Header="_Copy"
                                CommandParameter="{Binding PlacementTarget.SelectedItems, RelativeSource={RelativeSource FindAncestor,AncestorType=ContextMenu}}"
                                Command="{Binding listCopy}"/>
                            <MenuItem Header="_Remove"
                                CommandParameter="{Binding PlacementTarget.SelectedItems, RelativeSource={RelativeSource FindAncestor,AncestorType=ContextMenu}}"
                                Command="{Binding listRemove}"/>
                        </ContextMenu>
                    </ListView.ContextMenu>
                    <ListView.InputBindings>
                        <KeyBinding Command="{Binding Path=listCopy}" Key="C" Modifiers="Control" CommandParameter="{Binding SelectedItems, ElementName=listViewLog}"/>
                    </ListView.InputBindings>
                </ListView>
            </GroupBox>
        </Grid>



    </Border>



</Window>